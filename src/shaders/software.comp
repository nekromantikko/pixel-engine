#version 450
#define MAX_SPRITES_PER_SCANLINE 64
#define NAMETABLE_SIZE 0x2000
#define SPRITE_PALETTE_OFFSET 8

const ivec2 nametableSizePixels = ivec2(512, 512);

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outImage;
layout(set = 0, binding = 1) uniform sampler1D palette;
struct ChrTile {
	uint p0[2];
	uint p1[2];
	uint p2[2];
};
struct ChrSheet {
	ChrTile tiles[256];
};
layout(set = 0, binding = 2) readonly buffer CHR
{
    ChrSheet sheet[2];
} chr;
layout(set = 0, binding = 3) readonly buffer PalTable
{
    uint data[]; // Again, groups of 4 colors
} palTable;
layout(set = 0, binding = 4) readonly buffer Nametable
{
    uint data[]; // Again, groups of 4 tiles
} nametable;
struct Sprite
{
	int pos;
	uint attributes;
};
layout(set = 0, binding = 5) readonly buffer Sprites
{
    Sprite data[];
} sprites;
struct ScanlineData {
	uint spriteCount;
	uint spriteIndices[MAX_SPRITES_PER_SCANLINE];

	int scrollX;
	int scrollY;
};
layout(set = 0, binding = 6) readonly buffer Scanlines
{
    ScanlineData data[];
} scanlines;

uint ReadNametableWord(int index, int tileOffset) {
	int coarse = tileOffset >> 1; // Offset to 2 byte block
	int fine = tileOffset & 1; // byte index (1 bit)
	uint nametableOffset = index * (NAMETABLE_SIZE / 4);
	uint result = nametable.data[nametableOffset + coarse];
	return bitfieldExtract(result, 16 * fine, 16);
}

uint ReadCHRTile(uint chrIndex, uint tileIndex, uint offset, uint flipX, uint flipY) {
	if (flipX != 0) {
		offset ^= 7;
	}
	if (flipY != 0) {
		offset ^= 56;
	}

	// No 64bit ints, so tiles split in half
	uint whichHalf = offset >> 5;  // Divide by 32 (2^5)
	uint bitOffset = offset & 31;  // Modulo 32 (2^5 - 1)

	// Fetch the tile data (each plane is split into two 32-bit parts)
	ChrTile tile = chr.sheet[chrIndex].tiles[tileIndex];
	uint t0 = tile.p0[whichHalf];
	uint t1 = tile.p1[whichHalf];
	uint t2 = tile.p2[whichHalf];

	// Extract the bit from each plane using bitfieldExtract
	uint result = bitfieldExtract(t0, int(bitOffset), 1);
	result |= bitfieldExtract(t1, int(bitOffset), 1) << 1;
	result |= bitfieldExtract(t2, int(bitOffset), 1) << 2;

	return result;
}

uint ReadPaletteTable(uint tableIndex, uint colorIndex) {
	uint coarse = tableIndex * 2 + colorIndex / 4;
	uint fine = colorIndex % 4;
	uint result = palTable.data[coarse];
	return bitfieldExtract(result, int(8 * fine), 8);
}

ivec2 Scroll(ScanlineData scanline, ivec2 screenPos, out int nametableIndex) {
	ivec2 scrollPos = screenPos;
	scrollPos += ivec2(scanline.scrollX, scanline.scrollY);
	ivec2 nametableIndex2d = (scrollPos / nametableSizePixels);
	if (sign(scrollPos.x) == -1) {
		nametableIndex2d.x -= 1;
	}
	if (sign(scrollPos.y) == -1) {
		nametableIndex2d.y -= 1;
	}
	nametableIndex = (nametableIndex2d.x + nametableIndex2d.y) % 2;
	scrollPos %= nametableSizePixels;
	return scrollPos;
}

ivec2 RenderBackground(ivec2 screenPos) {
	ScanlineData scanline = scanlines.data[screenPos.y];
	int nametableIndex;
	ivec2 scrollPos = Scroll(scanline, screenPos, nametableIndex);

	ivec2 coarse2d = scrollPos / 8; // position of tile
	int coarse = coarse2d.x + coarse2d.y * 64; // Should be 12 bits (yyyyyyxxxxxx)
	ivec2 fine2d = scrollPos % 8; // position of pixel within tile
	int fine = fine2d.x + fine2d.y * 8; // Should be 6 bits (yyyxxx)

	uint tile = ReadNametableWord(nametableIndex, coarse);
	uint tileIndex = bitfieldExtract(tile, 0, 10);
	uint palette = bitfieldExtract(tile, 10, 3);
	uint flipX = bitfieldExtract(tile, 14, 1);
	uint flipY = bitfieldExtract(tile, 15, 1);
	
	uint chrPage = (tileIndex >> 8) & 3;
	uint pageTile = tileIndex & 0xff;
	uint colorIndex = ReadCHRTile(chrPage, pageTile, fine, flipX, flipY);

	// Don't draw transparent pixels
	if (colorIndex == 0) {
		return ivec2(0, 0);
	}

	return ivec2(colorIndex, palette);
}

vec3 RenderDebugGrid(ivec2 screenPos, vec3 background) {
	ScanlineData scanline = scanlines.data[screenPos.y];
	int nametableIndex;
	ivec2 scrollPos = Scroll(scanline, screenPos, nametableIndex);

	if (scrollPos.x % 16 == 0 || scrollPos.y % 16 == 0) {
		return mix(background, vec3(0.0, 0.0, 1.0), 0.5);
	}
	else if (scrollPos.x % 8 == 0 || scrollPos.y % 8 == 0) {
		return mix(background, vec3(0.0, 0.0, 1.0), 0.25);
	}
	return background;
}

ivec2 RenderSprites(ivec2 screenPos, ivec2 result) {
	ScanlineData scanline = scanlines.data[screenPos.y];
	uint spriteCount = min(scanline.spriteCount, MAX_SPRITES_PER_SCANLINE);

	uint minSpriteIndex = ~uint(0);

	for (int i = 0; i < spriteCount; i++) {
		uint spriteIndex = scanline.spriteIndices[i];
		Sprite sprite = sprites.data[spriteIndex];
		int y = bitfieldExtract(sprite.pos, 0, 16);
		int x = bitfieldExtract(sprite.pos, 16, 16);
		// Is pixel inside sprite?
		if (screenPos.x >= x && screenPos.x < x + 8) {

			uint tileId = bitfieldExtract(sprite.attributes, 0, 10);
			uint palTableIndex = bitfieldExtract(sprite.attributes, 10, 3) + SPRITE_PALETTE_OFFSET;
			uint priority = bitfieldExtract(sprite.attributes, 13, 1);
			uint flipX = bitfieldExtract(sprite.attributes, 14, 1);
			uint flipY = bitfieldExtract(sprite.attributes, 15, 1);

			ivec2 fine2d = screenPos - ivec2(x, y);
			int fine = fine2d.x + fine2d.y * 8;

			uint chrPage = (tileId >> 8) & 3;
			uint pageTile = tileId & 0xff;
			uint colorIndex = ReadCHRTile(chrPage + 4, pageTile, fine, flipX, flipY);

			// Don't draw transparent pixels
			if (colorIndex == 0) {
				continue;
			}

			// Sprites aren't guaranteed to be sorted so need to check
			// TODO: Maybe a pass after scanline evaluate to sort them?
			if (minSpriteIndex < spriteIndex) {
				continue;
			}
			
			minSpriteIndex = spriteIndex;

			// Draw sprites on top of bg if priority is 0 or if the bg pixel is not opaque
			if (priority == 0 || result.x == 0) {
				result = ivec2(colorIndex, palTableIndex);
			}
		}
	}

	return result;
}

void main() {
	ivec2 screenPos = ivec2(gl_GlobalInvocationID.xy);

	ivec2 result = RenderBackground(screenPos);
	result = RenderSprites(screenPos, result);

	int colorIndex = result.x;
	int palTableIndex = result.y;
	uint paletteIndex = ReadPaletteTable(palTableIndex, colorIndex);
	vec3 outColor = texture(palette, float(paletteIndex)).rgb;
	// outColor = RenderDebugGrid(screenPos, outColor);
	imageStore(outImage, screenPos, vec4(outColor, 1.0));
}