#version 450
#define MAX_SPRITES_PER_SCANLINE 64

layout(local_size_x = 8, local_size_y = 1, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outImage;
layout(set = 0, binding = 1) uniform sampler1D palette;

layout(set = 0, binding = 3) readonly buffer PalTable
{
    uint data[]; // Again, groups of 4 colors
} palTable;

uint ReadPaletteTable(int tableIndex, int colorIndex) {
	int coarse = tableIndex * 2 + colorIndex / 4;
	int fine = colorIndex % 4;
	uint result = palTable.data[coarse];
	return bitfieldExtract(result, 8 * fine, 8);
}

void main() {
	int palTableIndex = int(gl_WorkGroupID.x);
	int colorIndex = int(gl_LocalInvocationID.x);
	palTableIndex *= sign(colorIndex % 8); // BG is always color 0
	uint paletteIndex = ReadPaletteTable(palTableIndex, colorIndex);
	vec3 outColor = texture(palette, float(paletteIndex)).rgb;
	imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(outColor, 1.0));
}