#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outImage;
layout(set = 0, binding = 1, rgba8) uniform readonly image1D palette;
struct ChrTile {
	uint p0[2];
	uint p1[2];
	uint p2[2];
};
layout(set = 0, binding = 2) readonly buffer CHR
{
    ChrTile tiles[256];
} chr;
layout(set = 0, binding = 3) readonly buffer PalTable
{
    uint data[]; // Again, groups of 4 colors
} palTable;

// sRGB to Linear.
float ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}
vec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}

uint ReadCHRTile(uint tileIndex, uint offset, uint flipX, uint flipY) {
	if (flipX != 0) {
		offset ^= 7;
	}
	if (flipY != 0) {
		offset ^= 56;
	}

	// No 64bit ints, so tiles split in half
	uint whichHalf = offset >> 5;  // Divide by 32 (2^5)
	uint bitOffset = offset & 31;  // Modulo 32 (2^5 - 1)

	// Fetch the tile data (each plane is split into two 32-bit parts)
	ChrTile tile = chr.tiles[tileIndex];
	uint t0 = tile.p0[whichHalf];
	uint t1 = tile.p1[whichHalf];
	uint t2 = tile.p2[whichHalf];

	// Extract the bit from each plane using bitfieldExtract
	uint result = bitfieldExtract(t0, int(bitOffset), 1);
	result |= bitfieldExtract(t1, int(bitOffset), 1) << 1;
	result |= bitfieldExtract(t2, int(bitOffset), 1) << 2;

	return result;
}

uint ReadPaletteTable(uint tableIndex, uint colorIndex) {
	uint coarse = tableIndex * 2 + colorIndex / 4;
	uint fine = colorIndex % 4;
	uint result = palTable.data[coarse];
	return bitfieldExtract(result, int(8 * fine), 8);
}

void main() {
	uint sheetIndex = gl_WorkGroupID.y / 16;
	uvec2 tileCoord = uvec2(gl_WorkGroupID.x % 16, gl_WorkGroupID.y % 16);
	uint tileIndex = tileCoord.x + tileCoord.y * 16 + sheetIndex * 256;
	uint palTableIndex = (gl_WorkGroupID.x / 16) + sheetIndex * 8;

	int fine = int(gl_LocalInvocationID.x + gl_LocalInvocationID.y * 8); // Should be 6 bits (yyyxxx)
	uint colorIndex = ReadCHRTile(tileIndex, fine, 0, 0);
	uint paletteIndex = ReadPaletteTable(palTableIndex, colorIndex);
	vec3 outColor = imageLoad(palette, int(paletteIndex)).rgb;
	outColor = ToLinear(outColor);
	float a = colorIndex == 0 ? 0.0 : 1.0;
	imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(outColor, a));
}