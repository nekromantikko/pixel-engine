#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outImage;
layout(set = 0, binding = 1, rgba8) uniform readonly image1D palette;
struct CHRSheet {
	uint p0[512];
	uint p1[512];
	uint p2[512];
};
layout(set = 0, binding = 2) readonly buffer CHR
{
    CHRSheet sheet[2];
} chr;
layout(set = 0, binding = 3) readonly buffer PalTable
{
    uint data[]; // Again, groups of 4 colors
} palTable;
layout(push_constant) uniform PushConstant
{
	int paletteIndex;
} pushConstant;

// sRGB to Linear.
float ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}
vec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}

int ReadCHRTile(int chrIndex, int tileIndex, int offset, int flipX, int flipY) {
	if (flipX != 0) {
		offset ^= 7;
	}
	if (flipY != 0) {
		offset ^= 56;
	}

	int halfOffset = offset >= 32 ? offset >> 32 : offset;
	int ind = offset >= 32 ? tileIndex*2 + 1 : tileIndex*2;

	uint t0 = chr.sheet[chrIndex].p0[ind];
	uint t1 = chr.sheet[chrIndex].p1[ind];
	uint t2 = chr.sheet[chrIndex].p2[ind];

	uint result = (t0 & (1 << halfOffset)) >> halfOffset;
	result |= ((t1 & (1 << halfOffset)) >> halfOffset) << 1;
	result |= ((t2 & (1 << halfOffset)) >> halfOffset) << 2;

	return int(result);
}

int ReadPaletteTable(int tableIndex, int colorIndex) {
	int coarse = tableIndex * 2 + colorIndex / 4;
	int fine = colorIndex % 4;
	uint result = palTable.data[coarse];
	result &= (0xFF << (8 * fine));
	result >>= 8 * fine;
	return int(result);
}

void main() {
	uint chrIndex = gl_WorkGroupID.x / 16;
	uint tileIndex = (gl_WorkGroupID.x % 16) + (gl_WorkGroupID.y * 16);
	int fine = int(gl_LocalInvocationID.x + gl_LocalInvocationID.y * 8); // Should be 6 bits (yyyxxx)
	int colorIndex = ReadCHRTile(int(chrIndex), int(tileIndex), fine, 0, 0);
	int palTableIndex = pushConstant.paletteIndex % 8;
	int paletteIndex = ReadPaletteTable(palTableIndex, colorIndex);
	vec3 outColor = imageLoad(palette, paletteIndex).rgb;
	outColor = ToLinear(outColor);
	float a = colorIndex == 0 ? 0.0 : 1.0;
	imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(outColor, a));
}