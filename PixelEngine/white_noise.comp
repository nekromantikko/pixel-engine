#version 450
#define MAX_SPRITES_PER_SCANLINE 64

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outImage;
layout(set = 0, binding = 1, rgba8) uniform readonly image1D palette;
struct Tile
{
	uint pixelStrips[16]; // 4 pixel strips
};
layout(set = 0, binding = 2) readonly buffer CHR
{
    Tile data[];
} chr;
layout(set = 0, binding = 3) readonly buffer PalTable
{
    uint data[]; // Again, groups of 4 colors
} palTable;
layout(set = 0, binding = 4) readonly buffer Nametable
{
    uint data[]; // Again, groups of 4 tiles
} nametable;
struct Sprite
{
	int y;
	int x;
	uint tileId;
	uint attributes;
};
layout(set = 0, binding = 5) readonly buffer Sprites
{
    Sprite data[];
} sprites;
struct ScanlineData {
	uint spriteCount;
	uint spriteIndices[MAX_SPRITES_PER_SCANLINE];

	int scrollX;
	int scrollY;
	uint bgChrIndex;
	uint fgChrIndex;
};
layout(set = 0, binding = 6) readonly buffer Scanlines
{
    ScanlineData data[];
} scanlines;

// sRGB to Linear.
float ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}
vec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}

int ReadNametableByte(int index, int tileOffset) {
	int coarse = tileOffset / 4; // Offset to 4 byte block
	int fine = tileOffset % 4; // byte index (2bits)
	uint nametableOffset = index * (0x1000 / 4);
	uint result = nametable.data[nametableOffset + coarse];
	// Mask
	result &= (0xFF << (8 * fine));
	result >>= 8 * fine;
	return int(result);
}

int ReadTile(Tile tile, int offset, int flipX, int flipY) {
	if (flipX != 0) {
		offset ^= 7;
	}
	if (flipY != 0) {
		offset ^= 56;
	}
	int coarse = offset / 4;
	int fine = offset % 4;
	uint result = tile.pixelStrips[coarse];
	result &= (0xFF << (8 * fine));
	result >>= 8 * fine;
	return int(result);
}

int ReadPaletteTable(int tableIndex, int colorIndex) {
	int coarse = tableIndex * 2 + colorIndex / 4;
	int fine = colorIndex % 4;
	uint result = palTable.data[coarse];
	result &= (0xFF << (8 * fine));
	result >>= 8 * fine;
	return int(result);
}

ivec2 Scroll(ScanlineData scanline, ivec2 screenPos, out int nametableIndex) {
	ivec2 scrollPos = screenPos;
	scrollPos += ivec2(scanline.scrollX, scanline.scrollY);
	ivec2 nametableSizeTiles = ivec2(512, 480);
	ivec2 nametableIndex2d = (scrollPos / nametableSizeTiles);
	if (sign(scrollPos.x) == -1) {
		nametableIndex2d.x -= 1;
	}
	if (sign(scrollPos.y) == -1) {
		nametableIndex2d.y -= 1;
	}
	nametableIndex2d %= 2;
	// Hardcoded vertical mirroring
	nametableIndex2d.y = 0;
	nametableIndex = nametableIndex2d.x + nametableIndex2d.y * 2;
	scrollPos %= nametableSizeTiles;
	return scrollPos;
}

vec3 RenderBackground(ivec2 screenPos) {
	ScanlineData scanline = scanlines.data[screenPos.y];
	int nametableIndex;
	ivec2 scrollPos = Scroll(scanline, screenPos, nametableIndex);

	ivec2 coarse2d = scrollPos / 8; // position of tile
	int coarse = coarse2d.x + coarse2d.y * 64; // Should be 12 bits (yyyyyyxxxxxx)
	ivec2 fine2d = scrollPos % 8; // position of pixel within tile
	int fine = fine2d.x + fine2d.y * 8; // Should be 6 bits (yyyxxx)

	int tileIndex = ReadNametableByte(nametableIndex, coarse);
	
	uint patternTableOffset = scanline.bgChrIndex * 256;
	Tile tile = chr.data[patternTableOffset + tileIndex];
	int colorIndex = ReadTile(tile, fine, 0, 0);

	// Nametable attributes store palette indices for 4x4 tiles in one byte
	int attributeOffset = 0xF00; // Attribute memory starts after all the tile data
	ivec2 attributeBlockPos2d = coarse2d / 4; // Position of big 4x4 block
	int attributeBlockPos = attributeBlockPos2d.x + attributeBlockPos2d.y * 16; // This should be 8 bits (yyyyxxxx)
	ivec2 attributeBlockTilePos2d = coarse2d % 4; // Position of tile within big 4x4 block
	int attributeBlockTilePos = attributeBlockTilePos2d.x + attributeBlockTilePos2d.y * 4; // This should be 4 bits (yyxx)
	ivec2 attributeSubBlockPos2d = attributeBlockTilePos2d / 2; // Position of 2x2 block within 4x4 block
	int attributeSubBlockPos = attributeSubBlockPos2d.x + attributeSubBlockPos2d.y * 2; // This should be 2 bits
	int palTableIndex = ReadNametableByte(nametableIndex, attributeOffset + attributeBlockPos);
	palTableIndex &= (3 << (2 * attributeSubBlockPos));
	palTableIndex >>= 2 * attributeSubBlockPos;

	int paletteIndex = ReadPaletteTable(palTableIndex, colorIndex);

	return imageLoad(palette, paletteIndex).rgb;
}

vec3 RenderDebugGrid(ivec2 screenPos, vec3 background) {
	ScanlineData scanline = scanlines.data[screenPos.y];
	int nametableIndex;
	ivec2 scrollPos = Scroll(scanline, screenPos, nametableIndex);

	if (scrollPos.x % 16 == 0 || scrollPos.y % 16 == 0) {
		return mix(background, vec3(0.0, 0.0, 1.0), 0.5);
	}
	else if (scrollPos.x % 8 == 0 || scrollPos.y % 8 == 0) {
		return mix(background, vec3(0.0, 0.0, 1.0), 0.25);
	}
	return background;
}

vec3 RenderSprites(ivec2 screenPos, vec3 background) {
	vec3 result = background;
	
	ScanlineData scanline = scanlines.data[screenPos.y];
	uint spriteCount = min(scanline.spriteCount, MAX_SPRITES_PER_SCANLINE);
	uint largestSpriteIndexWithOpaquePixel = 0;
	for (int i = 0; i < spriteCount; i++) {
		uint spriteIndex = scanline.spriteIndices[i];
		Sprite sprite = sprites.data[spriteIndex];
		// Is pixel inside sprite?
		if (screenPos.x >= sprite.x && screenPos.x < sprite.x + 8) {
			uint patternTableOffset = scanline.fgChrIndex * 256;
			Tile tile = chr.data[patternTableOffset + sprite.tileId];

			int palTableIndex = int(sprite.attributes & 3) + 4;
			int priority = int((sprite.attributes >> 5) & 1); // TODO
			int flipX = int((sprite.attributes >> 6) & 1);
			int flipY = int((sprite.attributes >> 7) & 1);

			ivec2 fine2d = screenPos - ivec2(sprite.x, sprite.y);
			int fine = fine2d.x + fine2d.y * 8;
			int colorIndex = ReadTile(tile, fine, flipX, flipY);

			// Don't draw transparent pixels
			if (colorIndex == 0) {
				continue;
			}

			// "Sorting"
			if (spriteIndex < largestSpriteIndexWithOpaquePixel) {
				continue;
			}
			largestSpriteIndexWithOpaquePixel = spriteIndex;

			int paletteIndex = ReadPaletteTable(palTableIndex, colorIndex);
			result = imageLoad(palette, paletteIndex).rgb;
		}
	}

	return result;
}

void main() {
	ivec2 screenPos = ivec2(gl_GlobalInvocationID.xy);

	vec3 outColor = RenderBackground(screenPos);
	// outColor = RenderDebugGrid(screenPos, outColor);
	outColor = RenderSprites(screenPos, outColor);
	outColor = ToLinear(outColor);
	imageStore(outImage, screenPos, vec4(outColor, 1.0));
}